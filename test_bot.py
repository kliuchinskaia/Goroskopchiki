import pytest
from unittest.mock import patch
from bot import (
    calculate_combination_number,
    get_horoscope,
    get_compatibility,
    select_option,
    select_compatibility_male,
    select_compatibility_female,
    compatibility_result,
    ZODIAC_SIGNS,
    ZODIAC_INDEXES,
)

# –ú–æ–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockUpdate:
    def __init__(self, text):
        self.message = MockMessage(text)

class MockMessage:
    def __init__(self, text):
        self.text = text

    async def reply_text(self, text, **kwargs):
        return text

class MockContext:
    def __init__(self):
        self.user_data = {}

# –¢–µ—Å—Ç—ã –¥–ª—è calculate_combination_number
def test_calculate_combination_number_positive():
    assert calculate_combination_number("‚ôà –û–≤–µ–Ω", "‚ôâ –¢–µ–ª–µ—Ü") == 2
    assert calculate_combination_number("‚ôë –ö–æ–∑–µ—Ä–æ–≥", "‚ôí –í–æ–¥–æ–ª–µ–π") == 119

def test_calculate_combination_number_negative():
    with pytest.raises(KeyError):
        calculate_combination_number("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–Ω–∞–∫", "‚ôâ –¢–µ–ª–µ—Ü")
    with pytest.raises(KeyError):
        calculate_combination_number("‚ôà –û–≤–µ–Ω", "–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–Ω–∞–∫")

# –¢–µ—Å—Ç—ã –¥–ª—è get_horoscope
@patch('bot.requests.get')
def test_get_horoscope_positive(mock_get):
    mock_get.return_value.text = '''
        <div class="b6a5d4949c e45a4c1552">
            <p>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø.</p>
        </div>
    '''
    assert get_horoscope("aries", "today") == "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø."
# –¢–µ—Å—Ç—ã –¥–ª—è get_compatibility
@patch('bot.requests.get')
def test_get_compatibility_positive(mock_get):
    mock_get.return_value.status_code = 200
    mock_get.return_value.text = '''
        <div class="b6a5d4949c e45a4c1552">
            <p>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.</p>
        </div>
    '''
    result = get_compatibility("‚ôà –û–≤–µ–Ω", "‚ôâ –¢–µ–ª–µ—Ü")
    assert result == "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å."

# –¢–µ—Å—Ç—ã –¥–ª—è select_option
@pytest.mark.asyncio
async def test_select_option_positive():
    context = MockContext()
    context.user_data["sign"] = "‚ôà –û–≤–µ–Ω"
    update = MockUpdate("üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    result = await select_option(update, context)
    assert result == 1  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ

@pytest.mark.asyncio
async def test_select_option_negative():
    context = MockContext()
    context.user_data["sign"] = "‚ôà –û–≤–µ–Ω"
    update = MockUpdate("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    result = await select_option(update, context)
    assert result == 1  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è

# –¢–µ—Å—Ç—ã –¥–ª—è select_compatibility_male
@pytest.mark.asyncio
async def test_select_compatibility_male_positive():
    context = MockContext()
    update = MockUpdate("‚ôà –û–≤–µ–Ω")
    result = await select_compatibility_male(update, context)
    assert result == 2  # –£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∂–µ–Ω—Å–∫–æ–≥–æ –∑–Ω–∞–∫–∞

@pytest.mark.asyncio
async def test_select_compatibility_male_negative():
    context = MockContext()
    update = MockUpdate("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–Ω–∞–∫")
    result = await select_compatibility_male(update, context)
    assert result == 2  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–Ω–∞–∫, –Ω–æ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞

# –¢–µ—Å—Ç—ã –¥–ª—è select_compatibility_female
@pytest.mark.asyncio
async def test_select_compatibility_female_positive():
    context = MockContext()
    context.user_data["male_sign"] = "‚ôà –û–≤–µ–Ω"
    update = MockUpdate("‚ôâ –¢–µ–ª–µ—Ü")
    result = await select_compatibility_female(update, context)
    assert result == 3  # –£—Å–ø–µ—à–Ω—ã–π –≤—ã–±–æ—Ä –∑–Ω–∞–∫–∞

@pytest.mark.asyncio
async def test_select_compatibility_female_negative():
    context = MockContext()
    context.user_data["male_sign"] = "‚ôà –û–≤–µ–Ω"
    update = MockUpdate("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–Ω–∞–∫")
    result = await select_compatibility_female(update, context)
    assert result == 2  # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –≤—ã–±–æ—Ä—É

# –¢–µ—Å—Ç—ã –¥–ª—è compatibility_result
@pytest.mark.asyncio
async def test_compatibility_result_positive():
    context = MockContext()
    context.user_data["male_sign"] = "‚ôà –û–≤–µ–Ω"
    update = MockUpdate("‚ôâ –¢–µ–ª–µ—Ü")
    result = await compatibility_result(update, context)
    assert result == 1  # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

@pytest.mark.asyncio
async def test_compatibility_result_negative():
    context = MockContext()
    context.user_data["male_sign"] = "‚ôà –û–≤–µ–Ω"
    update = MockUpdate("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–Ω–∞–∫")
    result = await compatibility_result(update, context)
    assert result == 3  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä
